doctype html
html 
    head 
        title Tree Builder
        
        link(rel="stylesheet" href="//veg.github.io/phylotree.js/phylotree.css" )

        script(src="//code.jquery.com/jquery.js")
        script(src="//d3js.org/d3.v3.min.js")
        script(src="//veg.github.io/phylotree.js/phylotree.js")
        script(src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js" charset="utf-8")

    body 
        link(rel="stylesheet" href= "css/index.css")
        img(src="banner.png")
        h1 Tree Builder
        div#Controls
            div#Style
                button(value = "Linear" id= "linear" onclick="setLinearLayout()") Linear
                button(value = "Radial" id= "radial" onclick="setRadialLayout()") Radial
            div#Align
                button(value = "AlignLeft" id= "left" onclick="alignLeft()") Align left
                button(value = "AlignRight" id= "right" onclick="alignRight()") Align right
            div#Download
                button(value = "Download" id= "right" "onclick"= "downloadSVG()") Download SVG
            div#Reset
                button(value = "Reset" id= "reset" onclick="resetTree()") Reset

        svg#tree-container
        script.
            const width = 1000;
            const height = 300;

            const svg = d3.select("#tree-container")
                .attr("width", width)
                .attr("height", height);
            
            const g = svg.append("g")

            const newick = `#{newickData}`;
            let originalTreeData = newick;

            let tree = d3.layout.phylotree()
                .svg(svg)

            tree(newick)
                .size([width,height])
                .spacing_y(55)
                .spacing_x(20)
                .layout().options({
                    'selectable': true,
                    // turn off the menu on internal nodes
                    'collapsible': true,
                    // turn off d3 animations
                    'transitions': true,
                    // show nodes
                    'nodes' : true,
                    // layout alignment
                    'is-radial': false
                });


            function setLinearLayout() {
                tree.size([width,height])
                .spacing_y(55)
                .spacing_x(20)
                .layout().options({'is-radial': false}).update_layout();
                tree.layout(newick);
            };
            function setRadialLayout() {
                tree.layout()
                .spacing_y(55)
                .spacing_x(55)
                .options({'is-radial': true, 'max-radius' : height}).update_layout();
                tree.layout(newick);
            };
            function alignLeft() {
                tree.layout()
                .options({'align-tips' : false}).update_layout();
                tree.layout(newick);
            };
            function alignRight() {
                tree.layout()
                .options({'align-tips' : true}).update_layout();
                tree.layout(newick);
            };

            async function downloadSVG() {
                const svgElement = document.querySelector("#tree-container");

                if (!svgElement) {
                    alert("SVG not found.");
                    return;
                }

                // Clone the SVG so the original remains unchanged
                const clone = svgElement.cloneNode(true);

                // Fetch external CSS file(s)
                let cssText = "";
                try {
                    const response = await fetch("/css/phylotree.css"); // Update path if needed
                    cssText = await response.text();
                } catch (e) {
                    console.error("Failed to fetch CSS:", e);
                }

                // Create a <style> element and put CSS into it
                const styleElement = document.createElement("style");
                styleElement.textContent = cssText;

                // Create <defs> and insert style
                const defs = document.createElementNS("http://www.w3.org/2000/svg", "defs");
                defs.appendChild(styleElement);
                clone.insertBefore(defs, clone.firstChild);

                // Serialize SVG and trigger download
                const serializer = new XMLSerializer();
                const svgString = serializer.serializeToString(clone);
                const blob = new Blob([svgString], { type: "image/svg+xml;charset=utf-8" });
                const url = URL.createObjectURL(blob);
                const downloadLink = document.createElement("a");
                downloadLink.href = url;
                downloadLink.download = "phylotree.svg";
                document.body.appendChild(downloadLink);
                downloadLink.click();
                document.body.removeChild(downloadLink);
                URL.revokeObjectURL(url);
                }

            function resetTree() {
                d3.select("#tree-container").select("svg").remove();
                const newSvg = d3.select("#tree-container").append("svg");
                let tree = d3.layout.phylotree()
                    .svg(d3.select("#tree-container"));
                tree(originalTreeData)
                    .size([width,height])
                    .spacing_y(55)
                    .spacing_x(20)
                    .layout().options({
                        'selectable': true,
                        // turn off the menu on internal nodes
                        'collapsible': true,
                        // turn off d3 animations
                        'transitions': true,
                        // show nodes
                        'nodes' : true,
                        'is-radial': false
                });
            }

